// Generated by CodiumAI
import { fireEvent, render, screen } from "@testing-library/react";
import { AddListForm } from "../add-list-form";
import userEvent from "@testing-library/user-event";
import { createList } from "../../../../../../../..//actions/create-list-action";


jest.mock("../../../../../../../..//actions/create-list-action", () => ({
  createList: jest.fn(),
}));

describe('AddListForm', () => {

    // Renders a button with text "Add another list" and a plus icon when isEditing is false
    it('should render a button with text "Add another list" and a plus icon when isEditing is false', () => {
      // Arrange
      const boardId = "board1";
      render(<AddListForm boardId={boardId} />);
  
      // Act
      const addButton = screen.getByRole("button", { name: "Add another list" });
      // const plusIcon = screen.getByTestId("plus-icon");
  
      // Assert
      expect(addButton).toBeInTheDocument();
     //  expect(plusIcon).toBeInTheDocument();
    });

    // Clicking on the "Add another list" button sets isEditing to true
    it('should set isEditing to true when clicking on the "Add another list" button', async() => {
      // Arrange
      const boardId = "board1";
      render(<AddListForm boardId={boardId} />);
  
      // Act
      const addButton = screen.getByRole("button", { name: "Add another list" });
      await userEvent.click(addButton);
      // Assert
      expect(screen.getByRole('form')).toBeInTheDocument();
      expect(screen.getByRole("button", { name: "Add List" })).toBeInTheDocument();
    });

    // Renders a form with an input field and a submit button when isEditing is true
    it('should render a form with an input field and a submit button when isEditing is true', async () => {
      // Arrange
      const boardId = "board1";
      render(<AddListForm boardId={boardId} />);
  
      // Act
      const addButton = screen.getByRole("button", { name: "Add another list" });
      await userEvent.click(addButton);
  
      // Assert
      expect(screen.getByRole("form")).toBeInTheDocument();
      expect(screen.getByRole("textbox")).toBeInTheDocument();
      expect(screen.getByRole("button", { name: "Add List" })).toBeInTheDocument();
    });

    // createList function throws an error, logs "there was an error..."
    // it('should log "there was an error..." when createList function throws an error', async () => {
    //   // Arrange
    //   const boardId = "board1";
    //   render(<AddListForm boardId={boardId} />);
    //   const addButton = screen.getByRole("button", { name: "Add another list" });
    //   await userEvent.click(addButton);
    //   const addListButton = screen.getByRole("button", { name: "Add List" });
    //   fireEvent.submit(screen.getByTestId("form"));
    //   const createList = jest.fn();
    //   // Act
    //   jest.spyOn(console, "log").mockImplementation();
    //   await userEvent.click(addListButton);
      
    //   // Assert    
    //   expect(console.log).toHaveBeenCalledWith("I was called");
    // });

    // createList function returns an object with a message property, logs the message
  //   it('should log the message when createList function returns an object with a message property', async () => {
  //     // Arrange
  //   const boardId = "board1";
  //   render(<AddListForm boardId={boardId} />);
  //   const addButton = screen.getByRole("button", { name: "Add another list" });
  //   await userEvent.click(addButton);
  //   const addListButton = screen.getByRole("button", { name: "Add List" });
  
  //   // Act
  //   jest.spyOn(console, "log").mockImplementation();
  //  // jest.spyOn(global, "createList").mockResolvedValue({ message: "Unable to create list" });
  //   await userEvent.click(addListButton);
  
  //   // Assert
  //   expect(console.log).toHaveBeenCalledWith("Unable to create list");
  //   });

//     // formData.get("title") returns null, logs "there was an error..."
//     it('should log "there was an error..." when formData.get("title") returns null', async () => {
//       // Arrange
//       const boardId = "board1";
//       render(<AddListForm boardId={boardId} />);
//       const addButton = screen.getByRole("button", { name: "Add another list" });
//       await userEvent.click(addButton);
//       const addListButton = screen.getByRole("button", { name: "Add List" });
  
//       // Act
//       jest.spyOn(console, "log").mockImplementation();
//       jest.spyOn(window, "FormData").mockReturnValue({
//           get: jest.fn().mockReturnValue(null),
//           append: function (name: string, value: string | Blob): void {
//               throw new Error("Function not implemented.");
//           },
//           delete: function (name: string): void {
//               throw new Error("Function not implemented.");
//           },
//           getAll: function (name: string): FormDataEntryValue[] {
//               throw new Error("Function not implemented.");
//           },
//           has: function (name: string): boolean {
//               throw new Error("Function not implemented.");
//           },
//           set: function (name: string, value: string | Blob): void {
//               throw new Error("Function not implemented.");
//           },
//           forEach: function (callbackfn: (value: FormDataEntryValue, key: string, parent: FormData) => void, thisArg?: any): void {
//               throw new Error("Function not implemented.");
//           },
//           entries: function (): IterableIterator<[string, FormDataEntryValue]> {
//               throw new Error("Function not implemented.");
//           },
//           keys: function (): IterableIterator<string> {
//               throw new Error("Function not implemented.");
//           },
//           values: function (): IterableIterator<FormDataEntryValue> {
//               throw new Error("Function not implemented.");
//           },
//           [Symbol.iterator]: function (): IterableIterator<[string, FormDataEntryValue]> {
//               throw new Error("Function not implemented.");
//           }
//       });
//       await userEvent.click(addListButton);
  
//       // Assert
//       expect(console.log).toHaveBeenCalledWith("there was an error...");
//     });
 });
